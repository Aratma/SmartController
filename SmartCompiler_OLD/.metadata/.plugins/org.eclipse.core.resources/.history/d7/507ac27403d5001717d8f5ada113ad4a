#ifndef PARSETREE_H_
#define PARSETREE_H_

#include <stdio.h>
#include <map>
#include <string>

using namespace std;

class Token;

enum ENodeType
{
	UNKNOWN_NODE,
};

struct Node
{
	ENodeType m_nodeType;
	int m_lineNo;
	Token* m_pToken;

	map<string, Node*> m_mapNode;

	Node()
	: m_nodeType(UNKNOWN_NODE)
	, m_lineNo (0)
	, m_pToken(NULL)
	{

	}

	~Node()
	{
		if (m_pToken != NULL)
		{
			delete m_pToken;
			m_pToken = NULL;
		}

			for ( map<string,Node*> ::iterator it = m_mapNode.begin();  it != m_mapNode.end(); ++it)
			{
				if (it->second != NULL) delete it->second;
			}

			m_mapNode.clear();
	}
};


class ParseTree
{
public:
	ParseTree();
	virtual ~ParseTree();

public:
	ParseTree(const ParseTree &t); 				// copy constructor
	ParseTree& operator= (const ParseTree &t);	// assignment operator

public:
	void setLeftChild(Node* p);
	void setRightChild(Node* p);
	void setMidChild(Node* p);
	void setSibling(Node* p);

private:
	Node* m_pNode;
};

#endif /* PARSETREE_H_ */
