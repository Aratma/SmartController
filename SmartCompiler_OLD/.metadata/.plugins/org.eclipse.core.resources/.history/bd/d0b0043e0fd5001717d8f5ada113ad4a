#include "Token.h"
#include "SourceFile.h"
#include "ScannerState.h"
#include "Scanner.h"

Scanner::Scanner()
: m_pState(NULL)
, m_pSrcFile(NULL)
{
}

Scanner::~Scanner()
{
	if (m_pSrcFile != NULL)
	{
		m_pSrcFile->closeFile();
		delete m_pSrcFile;
		m_pSrcFile = NULL
	}

	m_keyWords.clear();
}

void Scanner::setState(ScannerState* pState)
{
	m_pState = pState;
}

void Scanner::initScanner(const char* pSrcFileName)
{
	openSourceFile(pSrcFileName);

	m_keyWords.clear();
	m_keyWords.insert(pair<string,ETokenType>(TokenText[::PROGRAM_TOK], ::PROGRAM_TOK));
	m_keyWords.insert(pair<string,ETokenType>(TokenText[::ENDPROG_TOK], ::ENDPROG_TOK));
}


ETokenType Scanner::isKeyword(const char* id)
{
	map<string, ETokenType>::iterator it;
	it = m_keyWords.find(id);
	if (it != m_keyWords.end())
	{
		return it->second;
	}

	return ::ERROR_TOK;
}

void Scanner::openSourceFile(const char* pSrcFileName)
{
	if (m_pSrcFile != NULL)
	{
		m_pSrcFile->closeFile();
	}

	m_pSrcFile = new SourceFile();
	m_pSrcFile->openFile(pSrcFileName);
}

void Scanner::getNextToken(Token& nextToken)
{
	// Always start with initial state
	m_pState = ScannerStateInit::getInstance();
	nextToken.initToken();

	do
	{
		m_pState->handle(this, nextToken);

	} while ((nextToken.getType() == ::EOF_TOK) || (nextToken.getType() == ::ERROR_TOK));

}
