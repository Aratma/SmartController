//============================================================================
// Name        : Token.h
// Author      :
// Version     :
// Copyright   :
// Description :
//============================================================================

#ifndef TOKEN_H_
#define TOKEN_H_

#include <string>

#define MAX_TOK_LEN 64


using namespace std;

enum ETokenType
{
	/* book-keeping tokens */
	ENDFILE_TOK, ERROR_TOK,
	/* reserved words */
	IF_TOK,THEN_TOK,ELSE_TOK,END_TOK,REPEAT_TOK,UNTIL_TOK,READ_TOK,WRITE_TOK,
	/* multi-character tokens */
	ID_TOK,NUM_TOK,
	/* special symbols */
	ASSIGN_TOK,EQ_TOK,LT_TOK,PLUS_TOK,MINUS_TOK,TIMES_TOK,OVER_TOK,LPAREN_TOK,RPAREN_TOK,SEMICOLON_TOK
};

class Token
{
public:
	Token();
	virtual ~Token();

	Token(ETokenType t, const char* pStr);

public:
	Token(const Token &t); 				// copy constructor
	Token& operator= (const Token &t);	// assignment operator

public:
	ETokenType getType() { return m_tokType;  }
	void setType (ETokenType t) { m_tokType = t; }
	void getText(char* pStr);

	void appendChar(const char* pCh);

private:
	ETokenType m_tokType;
	string m_tokString;

	// TODO: char buffer instead of string
	char m_tokText[MAX_TOK_LEN];
	short m_curLen;
};




#endif /* TOKEN_H_ */
