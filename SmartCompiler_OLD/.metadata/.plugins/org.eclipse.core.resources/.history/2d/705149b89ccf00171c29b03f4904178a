//============================================================================
// Name        : Token.h
// Author      :
// Version     :
// Copyright   :
// Description :
//============================================================================

#ifndef TOKEN_H_
#define TOKEN_H_

#include <string>

using namespace std;

enum ETokenType
{
	/* book-keeping tokens */
	ENDFILE_TOK, ERROR_TOK,
	/* reserved words */
	IF_TOK,THEN_TOK,ELSE_TOK,END_TOK,REPEAT_TOK,UNTIL_TOK,READ_TOK,WRITE_TOK,
	/* multi-character tokens */
	ID_TOK,NUM_TOK,
	/* special symbols */
	ASSIGN_TOK,EQ_TOK,LT_TOK,PLUS_TOK,MINUS_TOK,TIMES_TOK,OVER_TOK,LPAREN_TOK,RPAREN_TOK,SEMICOLON_TOK
};

class Token
{
public:
	Token();
	virtual ~Token();

	Token(ETokenType t, const string& s) { m_tokType = t; m_tokString = s; }

public:
	Token(const Token &t); 				// copy constructor
	Token& operator= (const Token &t);	// assignment operator

public:
	ETokenType getType() { return m_tokType;  }
	void setType (ETokenType t) { m_tokType = t; }

	void getString(string& s) { s = m_tokString; }
	void setString(const string& s) { m_tokString = s; }
	void appendChar(const int* pCh) {m_tokString.append(pCh); }

private:
	ETokenType m_tokType;
	string m_tokString;
};




#endif /* TOKEN_H_ */
