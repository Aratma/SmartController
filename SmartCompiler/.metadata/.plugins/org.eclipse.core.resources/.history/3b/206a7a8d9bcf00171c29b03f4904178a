#include "ScannerState.h"


bool ScannerStateDone::handle(Scanner* s, SourceFile* pFile, Token& nextToken)
{
	/*

     if (state == DONE)
     { tokenString[tokenStringIndex] = '\0';
       if (currentToken == ID)
         currentToken = reservedLookup(tokenString);
     }

	 */

	return true;
}

/*
bool ScannerStateInID::handle(Scanner* s, SourceFile* pFile, Token& nextToken)
{
	int ch = pFile->nextCol();
	if (!isalpha(ch))
	{
		pFile->prevCol();
		nextToken.setType(::ID_TOK);
		// s->setState(ScannerStateDone::getInstance());
	}

	return false;
}
*/

bool ScannerStateInit::handle(Scanner* s, SourceFile* pFile, Token& nextToken)
{
	int ch = pFile->nextCol();
	if (isdigit(ch))
	{
		// s->setState(ScannerStateInNumber::getInstance());
	}
	else if (isalpha(ch))
	{
		// s->setState(ScannerStateInID::getInstance());
	}
	else
	{
		nextToken.setType(::ERROR_TOK);
		nextToken.setString("ERRORTOK");
		s->setState(ScannerStateDone::getInstance());
	}

	return false;

	/*
	   switch (state)
	     { case START:
	         if (isdigit(c))
	           state = INNUM;
	         else if (isalpha(c))
	           state = INID;
	         else if (c == ':')
	           state = INASSIGN;
	         else if ((c == ' ') || (c == '\t') || (c == '\n'))
	           save = FALSE;
	         else if (c == '{')
	         { save = FALSE;
	           state = INCOMMENT;
	         }
	         else
	         { state = DONE;
	           switch (c)
	           { case EOF:
	               save = FALSE;
	               currentToken = ENDFILE;
	               break;
	             case '=':
	               currentToken = EQ;
	               break;
	             case '<':
	               currentToken = LT;
	               break;
	             case '+':
	               currentToken = PLUS;
	               break;
	             case '-':
	               currentToken = MINUS;
	               break;
	             case '*':
	               currentToken = TIMES;
	               break;
	             case '/':
	               currentToken = OVER;
	               break;
	             case '(':
	               currentToken = LPAREN;
	               break;
	             case ')':
	               currentToken = RPAREN;
	               break;
	             case ';':
	               currentToken = SEMI;
	               break;
	             default:
	               currentToken = ERROR;
	               break;
	           }
	         }
	         break;

*/
}
